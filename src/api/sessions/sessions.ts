/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * MBA Marketplace API
 * API to manage MBA Marketplace
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import * as axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AuthenticateSellerBody,
  AuthenticateSellerResponse,
} from '.././model'

/**
 * @summary Get the seller access token
 */
export const authenticateSellerControllerHandle = (
  authenticateSellerBody: AuthenticateSellerBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthenticateSellerResponse>> => {
  return axios.default.post(
    '/sellers/sessions',
    authenticateSellerBody,
    options
  )
}

export const getAuthenticateSellerControllerHandleMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authenticateSellerControllerHandle>>,
    TError,
    { data: AuthenticateSellerBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof authenticateSellerControllerHandle>>,
  TError,
  { data: AuthenticateSellerBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authenticateSellerControllerHandle>>,
    { data: AuthenticateSellerBody }
  > = props => {
    const { data } = props ?? {}

    return authenticateSellerControllerHandle(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthenticateSellerControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof authenticateSellerControllerHandle>>
>
export type AuthenticateSellerControllerHandleMutationBody =
  AuthenticateSellerBody
export type AuthenticateSellerControllerHandleMutationError = AxiosError<void>

/**
 * @summary Get the seller access token
 */
export const useAuthenticateSellerControllerHandle = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authenticateSellerControllerHandle>>,
    TError,
    { data: AuthenticateSellerBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof authenticateSellerControllerHandle>>,
  TError,
  { data: AuthenticateSellerBody },
  TContext
> => {
  const mutationOptions =
    getAuthenticateSellerControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Sign out
 */
export const signOutControllerHandle = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post('/sign-out', undefined, options)
}

export const getSignOutControllerHandleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signOutControllerHandle>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signOutControllerHandle>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signOutControllerHandle>>,
    void
  > = () => {
    return signOutControllerHandle(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignOutControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof signOutControllerHandle>>
>

export type SignOutControllerHandleMutationError = AxiosError<unknown>

/**
 * @summary Sign out
 */
export const useSignOutControllerHandle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signOutControllerHandle>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signOutControllerHandle>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSignOutControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
