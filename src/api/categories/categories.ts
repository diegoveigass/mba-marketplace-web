/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * MBA Marketplace API
 * API to manage MBA Marketplace
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import * as axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type { ListAllCategoriesResponse } from '.././model'

/**
 * @summary List all categories
 */
export const listAllCategoriesControllerHandle = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAllCategoriesResponse>> => {
  return axios.default.get('/categories', options)
}

export const getListAllCategoriesControllerHandleQueryKey = () => {
  return ['/categories'] as const
}

export const getListAllCategoriesControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>,
    TError,
    TData
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAllCategoriesControllerHandleQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>
  > = ({ signal }) =>
    listAllCategoriesControllerHandle({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListAllCategoriesControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>
>
export type ListAllCategoriesControllerHandleQueryError = AxiosError<unknown>

/**
 * @summary List all categories
 */

export function useListAllCategoriesControllerHandle<
  TData = Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listAllCategoriesControllerHandle>>,
    TError,
    TData
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListAllCategoriesControllerHandleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
