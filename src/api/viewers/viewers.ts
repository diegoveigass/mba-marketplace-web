/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * MBA Marketplace API
 * API to manage MBA Marketplace
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import * as axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type { RegisterViewResponse } from '.././model'

/**
 * @summary Register a view on a product
 */
export const registerViewControllerHandle = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RegisterViewResponse>> => {
  return axios.default.post(`/products/${id}/views`, undefined, options)
}

export const getRegisterViewControllerHandleMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerViewControllerHandle>>,
    TError,
    { id: unknown },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerViewControllerHandle>>,
  TError,
  { id: unknown },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerViewControllerHandle>>,
    { id: unknown }
  > = props => {
    const { id } = props ?? {}

    return registerViewControllerHandle(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterViewControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerViewControllerHandle>>
>

export type RegisterViewControllerHandleMutationError = AxiosError<void>

/**
 * @summary Register a view on a product
 */
export const useRegisterViewControllerHandle = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerViewControllerHandle>>,
    TError,
    { id: unknown },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof registerViewControllerHandle>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationOptions =
    getRegisterViewControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
