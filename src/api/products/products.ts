/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * MBA Marketplace API
 * API to manage MBA Marketplace
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import * as axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  ChangeProductStatusResponse,
  CreateProductBody,
  CreateProductRequestBody,
  CreateProductResponse,
  GetProductResponse,
  ListAllProductsControllerHandleParams,
  ListAllProductsResponse,
  ListAllSellerProductsControllerHandleParams,
  ListAllSellerProductsResponse,
} from '.././model'

/**
 * @summary List all products from the seller
 */
export const listAllSellerProductsControllerHandle = (
  params?: ListAllSellerProductsControllerHandleParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAllSellerProductsResponse>> => {
  return axios.default.get('/products/me', {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAllSellerProductsControllerHandleQueryKey = (
  params?: ListAllSellerProductsControllerHandleParams
) => {
  return ['/products/me', ...(params ? [params] : [])] as const
}

export const getListAllSellerProductsControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>,
  TError = AxiosError<void>,
>(
  params?: ListAllSellerProductsControllerHandleParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getListAllSellerProductsControllerHandleQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>
  > = ({ signal }) =>
    listAllSellerProductsControllerHandle(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListAllSellerProductsControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>
>
export type ListAllSellerProductsControllerHandleQueryError = AxiosError<void>

/**
 * @summary List all products from the seller
 */

export function useListAllSellerProductsControllerHandle<
  TData = Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>,
  TError = AxiosError<void>,
>(
  params?: ListAllSellerProductsControllerHandleParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listAllSellerProductsControllerHandle>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListAllSellerProductsControllerHandleQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create a product to sell
 */
export const sellProductControllerHandle = (
  createProductBody: CreateProductBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CreateProductResponse>> => {
  return axios.default.post('/products', createProductBody, options)
}

export const getSellProductControllerHandleMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sellProductControllerHandle>>,
    TError,
    { data: CreateProductBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof sellProductControllerHandle>>,
  TError,
  { data: CreateProductBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sellProductControllerHandle>>,
    { data: CreateProductBody }
  > = props => {
    const { data } = props ?? {}

    return sellProductControllerHandle(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SellProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof sellProductControllerHandle>>
>
export type SellProductControllerHandleMutationBody = CreateProductBody
export type SellProductControllerHandleMutationError = AxiosError<void>

/**
 * @summary Create a product to sell
 */
export const useSellProductControllerHandle = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sellProductControllerHandle>>,
    TError,
    { data: CreateProductBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof sellProductControllerHandle>>,
  TError,
  { data: CreateProductBody },
  TContext
> => {
  const mutationOptions = getSellProductControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary List all products
 */
export const listAllProductsControllerHandle = (
  params?: ListAllProductsControllerHandleParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAllProductsResponse>> => {
  return axios.default.get('/products', {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAllProductsControllerHandleQueryKey = (
  params?: ListAllProductsControllerHandleParams
) => {
  return ['/products', ...(params ? [params] : [])] as const
}

export const getListAllProductsControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof listAllProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params?: ListAllProductsControllerHandleParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listAllProductsControllerHandle>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAllProductsControllerHandleQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAllProductsControllerHandle>>
  > = ({ signal }) =>
    listAllProductsControllerHandle(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAllProductsControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListAllProductsControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAllProductsControllerHandle>>
>
export type ListAllProductsControllerHandleQueryError = AxiosError<unknown>

/**
 * @summary List all products
 */

export function useListAllProductsControllerHandle<
  TData = Awaited<ReturnType<typeof listAllProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params?: ListAllProductsControllerHandleParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listAllProductsControllerHandle>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListAllProductsControllerHandleQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get a product by its ID
 */
export const getProductControllerHandle = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProductResponse>> => {
  return axios.default.get(`/products/${id}`, options)
}

export const getGetProductControllerHandleQueryKey = (id: unknown) => {
  return [`/products/${id}`] as const
}

export const getGetProductControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductControllerHandle>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetProductControllerHandleQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductControllerHandle>>
  > = ({ signal }) =>
    getProductControllerHandle(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetProductControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductControllerHandle>>
>
export type GetProductControllerHandleQueryError = AxiosError<void>

/**
 * @summary Get a product by its ID
 */

export function useGetProductControllerHandle<
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductControllerHandle>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetProductControllerHandleQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Edit a product
 */
export const editProductControllerHandle = (
  id: unknown,
  createProductRequestBody: CreateProductRequestBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CreateProductResponse>> => {
  return axios.default.put(`/products/${id}`, createProductRequestBody, options)
}

export const getEditProductControllerHandleMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editProductControllerHandle>>,
    TError,
    { id: unknown; data: CreateProductRequestBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof editProductControllerHandle>>,
  TError,
  { id: unknown; data: CreateProductRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editProductControllerHandle>>,
    { id: unknown; data: CreateProductRequestBody }
  > = props => {
    const { id, data } = props ?? {}

    return editProductControllerHandle(id, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof editProductControllerHandle>>
>
export type EditProductControllerHandleMutationBody = CreateProductRequestBody
export type EditProductControllerHandleMutationError = AxiosError<void>

/**
 * @summary Edit a product
 */
export const useEditProductControllerHandle = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editProductControllerHandle>>,
    TError,
    { id: unknown; data: CreateProductRequestBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof editProductControllerHandle>>,
  TError,
  { id: unknown; data: CreateProductRequestBody },
  TContext
> => {
  const mutationOptions = getEditProductControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Change the product status
 */
export const changeProductStatusControllerHandle = (
  id: unknown,
  status: 'available' | 'cancelled' | 'sold',
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ChangeProductStatusResponse>> => {
  return axios.default.patch(`/products/${id}/${status}`, undefined, options)
}

export const getChangeProductStatusControllerHandleMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changeProductStatusControllerHandle>>,
    TError,
    { id: unknown; status: 'available' | 'cancelled' | 'sold' },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof changeProductStatusControllerHandle>>,
  TError,
  { id: unknown; status: 'available' | 'cancelled' | 'sold' },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changeProductStatusControllerHandle>>,
    { id: unknown; status: 'available' | 'cancelled' | 'sold' }
  > = props => {
    const { id, status } = props ?? {}

    return changeProductStatusControllerHandle(id, status, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChangeProductStatusControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof changeProductStatusControllerHandle>>
>

export type ChangeProductStatusControllerHandleMutationError = AxiosError<void>

/**
 * @summary Change the product status
 */
export const useChangeProductStatusControllerHandle = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changeProductStatusControllerHandle>>,
    TError,
    { id: unknown; status: 'available' | 'cancelled' | 'sold' },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof changeProductStatusControllerHandle>>,
  TError,
  { id: unknown; status: 'available' | 'cancelled' | 'sold' },
  TContext
> => {
  const mutationOptions =
    getChangeProductStatusControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
